var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = SlurmHyperopt","category":"page"},{"location":"#SlurmHyperopt","page":"Home","title":"SlurmHyperopt","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for SlurmHyperopt.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [SlurmHyperopt]","category":"page"},{"location":"#DataFrames.DataFrame-Tuple{SlurmHyperoptimizer}","page":"Home","title":"DataFrames.DataFrame","text":"DataFrames(sho::SlurmHyperoptimizer)\n\nReturns the results and parameters as a DataFrame\n\n\n\n\n\n","category":"method"},{"location":"#SlurmHyperopt.ProductSampler","page":"Home","title":"SlurmHyperopt.ProductSampler","text":"ProductSampler(; kwargs...)\n\nForms a Iterators.product of all kwargs and in this way an iterator over the first N_samples of the complete hyperparameter space. \n\n\n\n\n\n","category":"type"},{"location":"#SlurmHyperopt.RandomSampler","page":"Home","title":"SlurmHyperopt.RandomSampler","text":"RandomSampler(;kwargs...)\n\nDraws a hyperparameters config from the kwargs randomly.\n\n\n\n\n\n","category":"type"},{"location":"#SlurmHyperopt.SlurmHyperoptimizer","page":"Home","title":"SlurmHyperopt.SlurmHyperoptimizer","text":"SlurmHyperoptimizer(ho::Hyperoptimizer; slurm_params::SlurmParams=nothing)\n\nCreates a Slurm Job Array submission file and a Hyperoptimizer instance for your Hyperoptimizer needs. Takes the same arguments as Hyperoptimizer from Hyperopt + the keyword argument slurm_params.\n\n\n\n\n\n","category":"type"},{"location":"#SlurmHyperopt.SlurmParams","page":"Home","title":"SlurmHyperopt.SlurmParams","text":"struct SlurmParams\n\nHolds all user defined parameters for the Slurm script. The constructor works with keyword arguments. If a field is nothing, it is omitted in the script. Hyphens \"-\" are replaced by underscores \"_\" compared to regular Slurm names. Currently: \n\n* `qos`\n* `job_name`\n* `account`\n* `output = nothing` if output and error are nothing, they are automatically generated based on the job name and the job array task index\n* `error = nothing`\n* `partition = nothing`\n* `gres = nothing`\n* `nodes = nothing`\n* `ntasks_per_node = nothing`\n* `cpus-per-task = nothing`\n* `workdir = nothing`\n* `mail_type = nothing`\n* `mail_user = nothing`\n* `parallel_jobs = nothing`: how many jobs can run at the same time?\n* `file_path = \"\"`: path to Slurm script file to be saved\n* `extra_calls = \"\"`: string with extra calls, e.g. loading modules etc\n* `julia_call = \"\"`: julia call\n\n\n\n\n\n","category":"type"},{"location":"#Base.getindex-Tuple{SlurmHyperoptimizer, Integer}","page":"Home","title":"Base.getindex","text":"get_index(ho::SlurmHyperoptimizer, i::Integer)\n\nVery hacky way how to index a Hyperoptimizer object, that respect its history, in case the individual samples are not independend (as for Hyperband)\n\n\n\n\n\n","category":"method"},{"location":"#SlurmHyperopt.generate_slurm_file-Tuple{SlurmParams, Integer}","page":"Home","title":"SlurmHyperopt.generate_slurm_file","text":"generate_slurm_file(p::SlurmParams, N_jobs::Integer)\n\nGenerates the Slurm script file based on a SlurmParams instance.\n\n\n\n\n\n","category":"method"},{"location":"#SlurmHyperopt.merge_results!-Tuple{SlurmHyperoptimizer}","page":"Home","title":"SlurmHyperopt.merge_results!","text":"merge_results!(sho::SlurmHyperoptimizer; delete_temp_files=false, N_samples::Union{Nothing, Int}=nothing)\n\nMerges the results and store them in the sho.results field. Also deletes the temporal files if delete_temp_files==true. In case N_samples is provided, the routine tries to merge that many files, if nothing is provided it takes the N_samples set in sho.\n\n\n\n\n\n","category":"method"},{"location":"#SlurmHyperopt.save_result-Tuple{SlurmHyperoptimizer, HyperoptResults, Integer}","page":"Home","title":"SlurmHyperopt.save_result","text":"save_result(sho::SlurmHyperoptimizer, res::HyperoptResults, i::Integer)\n\n(Temporally) saves the results res of job i. Results are later merged with merge_results!.\n\n\n\n\n\n","category":"method"}]
}
